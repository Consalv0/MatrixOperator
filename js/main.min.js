function addRow(path,id,row){row='<div class="d-flex flex-nowrap" id="'+id+'">',$(path).append(row)}function addColumn(path,id,value,column){void 0===value&&(value=""),column='<input type="number" class="form-control matrixListener" id="'+id+'" value="'+value+'" placeholder="0" style="text-align:center;">',path.includes("mTableC")&&(column=column.replace(/"([^"]*)$/,'" readonly$1')),$(path).append(column)}function doMatrix(matrix,rows,columns){for(let i=0;i<rows;i++){matrix.push([]);for(let j=0;j<columns;j++)matrix[i].push("")}}function makeTable(matrix,name){$("#mTable"+name+" #table").empty(),matrix.forEach(function(matrix,i){addRow("#mTable"+name+" #table",i),matrix.forEach(function(matrix,j){addColumn("#mTable"+name+" #table div#"+i,j,matrix)})}),sizeText(matrix,"#mTable"+name)}function getMatrixWithID(parentID,onlyID=!1){return parentID=parentID.toString(),parentID=parentID.replace(/mTable/g,""),"onlyID"===onlyID?parentID:"A"===parentID?matrixA:"B"===parentID?matrixB:"C"===parentID?matrixC:void 0}function sizeText(matrix,path){let matrixRows=matrix.length,matrixColumns=matrix[0].length;$(path+" h6.card-subtitle").text(matrixRows+" Ã— "+matrixColumns)}function toggleModal(path){$(path).modal("toggle")}function unCheck(name){$(name+' input:radio[name="options"]').parent().removeClass("active")}function doSum(mFirst,mSecond,sign=!0){if(mFirst.length!==mSecond.length)return unCheck("#matrixOperator"),void toggleModal("#noSameSize");if(mFirst[0].length!==mSecond[0].length)return unCheck("#matrixOperator"),void toggleModal("#noSameSize");let mSolved=[];for(let i=0;i<mFirst.length;i++){mSolved.push([]);for(let j=0;j<mFirst[i].length;j++)sign?mSolved[i].push(mFirst[i][j]+mSecond[i][j]):mSolved[i].push(mFirst[i][j]-mSecond[i][j])}matrixC=mSolved,makeTable(matrixC,"C")}function doMult(mFirst,mSecond,mSolved=[]){if(mFirst[0].length!==mSecond.length)return unCheck("#matrixOperator"),void toggleModal("#noEqualIntersections");let sum=0;mFirst.forEach(function(element,m){mSolved.push([]);for(let i=0;i<mSecond[0].length;i++){mSolved[m].push(0),sum=0;for(let j=0;j<element.length;j++)sum+=element[j]*mSecond[j][i],j===element.length-1&&(mSolved[m][i]=sum)}}),matrixC=mSolved,makeTable(matrixC,"C")}function doMultBy(id,num){let matrix=getMatrixWithID(id),mSolved=[];for(let i=0;i<matrix.length;i++){mSolved.push([]);for(let j=0;j<matrix[i].length;j++)mSolved[i].push(matrix[i][j]*num)}matrix.splice(0,matrix.length),mSolved.forEach(function(element){matrix.push(element)}),makeTable(matrix,id)}function doTranspose(id){let matrix=getMatrixWithID(id),mSolved=[];for(let i=0;i<matrix[0].length;i++){mSolved.push([]);for(let j=0;j<matrix.length;j++)mSolved[i].push(matrix[j][i])}matrix.splice(0,matrix.length),mSolved.forEach(function(element){matrix.push(element)}),makeTable(matrix,id)}function doOperation(matrixFirst,matrixSecond){matrixFirst="Matrix B"===$("#matrixFirst").find(":selected").text()?matrixB:matrixA,matrixSecond="Matrix B"===$("#matrixSecond").find(":selected").text()?matrixB:matrixA;let operation=$("#operation").find(".active").attr("id");"sum"===operation&&doSum(matrixFirst,matrixSecond),"sub"===operation&&doSum(matrixFirst,matrixSecond,!1),"mult"===operation&&doMult(matrixFirst,matrixSecond)}var matrixA=[],matrixB=[],matrixC=[];doMatrix(matrixA,3,3),doMatrix(matrixB,3,3),makeTable(matrixA,"A"),makeTable(matrixB,"B"),$(document).on("click","#transpose",function(){let parentID=$(this).parents(".card").attr("id"),id=getMatrixWithID(parentID,"onlyID");if(doTranspose(id),"C"===id)return void unCheck("#matrixOperator");doOperation()}),$(document).on("click","#multBy",function(){let parentID=$(this).parents(".card").attr("id"),id=getMatrixWithID(parentID,"onlyID");if(doMultBy(id,$(this).parent().find("input").val()?$(this).parent().find("input").val():1),"C"===id)return void unCheck("#matrixOperator");doOperation()}),$(document).on("click","#listCopies div",function(){let id=$(this).attr("id");id=id.replace(/copy/g,"");let matrix=getMatrixWithID(id),inmatrix=getMatrixWithID($(this).parents(".card").attr("id")),inID=getMatrixWithID($(this).parents(".card").attr("id"),"onlyID");id!==inID&&(unCheck("#matrixOperator"),inmatrix.splice(0,inmatrix.length),matrix.forEach(function(element){inmatrix.push(element)}),makeTable(inmatrix,inID),doOperation())}),$(document).on("click","#matrixOperator label",function(){unCheck("#matrixOperator"),$(this).addClass("active"),doOperation()}),$(document).on("select change","#matrixOperator select",doOperation),$(document).on("change keyup",".matrixListener",function(){let parentID=$(this).parents(".card").attr("id"),matrix=getMatrixWithID(parentID),column=$(this).parent().attr("id"),row=$(this).attr("id"),value=parseInt($(this).val())?parseInt($(this).val()):"";matrix[column][row]=value,doOperation(),sizeText(matrix,"#"+parentID)}),$(document).on("click","#rows #sum",function(matrix){let parentID=$(this).parents(".card").attr("id");if(matrix=getMatrixWithID(parentID),12!==matrix.length){addRow("#"+parentID+" #table",matrix.length);let newRow=[];matrix[0].forEach(function(element,idx){addColumn("#"+parentID+" #table div#"+matrix.length,idx),newRow.push("")}),matrix.push(newRow),sizeText(matrix,"#"+parentID),doOperation()}}),$(document).on("click","#rows #sub",function(matrix){let parentID=$(this).parents(".card").attr("id");matrix=getMatrixWithID(parentID),1!==matrix.length&&($("#"+parentID+" #table div#"+(matrix.length-1)).fadeOut(100,function(){$(this).remove()}),matrix.pop(),sizeText(matrix,"#"+parentID),doOperation())}),$(document).on("click","#columns #sum",function(matrix){let parentID=$(this).parents(".card").attr("id");matrix=getMatrixWithID(parentID),12!==matrix[0].length&&($("#"+parentID+" #table div").each(function(idx){addColumn("#"+parentID+" #table div#"+idx,matrix[0].length)}),matrix.forEach(function(mtx){mtx.push("")}),sizeText(matrix,"#"+parentID),doOperation())}),$(document).on("click","#columns #sub",function(matrix){let parentID=$(this).parents(".card").attr("id");matrix=getMatrixWithID(parentID),1!==matrix[0].length&&($("#"+parentID+" #table div").each(function(idx,element){$(element).children().last().fadeOut(100,function(){$(this).remove()})}),matrix.forEach(function(mtx){mtx.pop()}),sizeText(matrix,"#"+parentID),doOperation())}),doOperation();